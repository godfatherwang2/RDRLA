import torch.nn as nn
import torch
import math
from torch import Tensor
import torch.nn.functional as F
class eca_layer(nn.Module):
    """Constructs a ECA module.
    Args:
        channel: Number of channels of the input feature map
        k_size: Adaptive selection of kernel size
        source: https://github.com/BangguWu/ECANet
    """
    def __init__(self, channel, k_size=3):
        super(eca_layer, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.conv = nn.Conv1d(1, 1, kernel_size=k_size, padding=(k_size - 1) // 2, bias=False)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # x: input features with shape [b, c, h, w]
        b, c, h, w = x.size()
        # feature descriptor on the global spatial information
        y = self.avg_pool(x)
        # Two different branches of ECA module
        y = self.conv(y.squeeze(-1).transpose(-1, -2)).transpose(-1, -2).unsqueeze(-1)
        # Multi-scale information fusion
        y = self.sigmoid(y)
        return x * y.expand_as(x)

def to_2tuple(x):
    # type: (Union[int, Tuple[int, int]]) -> Tuple[int, int]
    """
    Standardize a pair of integers or single integer into a 2-tuple.

    # Arguments
        x: can be a tuple of 2 integers (first is rows, second is columns) or an integer (same as (x, x)).
    """
    if isinstance(x, int):
        return x, x
    if isinstance(x, tuple) and len(x) == 2:
        return x
    raise ValueError('Must provide an integer or a tuple of 2 integers')
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor: Tensor, mean: float = 0., std: float = 1., a: float = -2., b: float = 2.) -> Tensor:
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)
def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)
def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)
class RLA_Bottleneck(nn.Module):
    expansion = 4
    def __init__(self, inplanes, planes, stride=1, downsample=None,
                 rla_channel=32, ECA_size=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None, reduction=16):
        super(RLA_Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        # Both self.conv2 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes + rla_channel, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride
        self.averagePooling = None
        if downsample is not None and stride != 1:
            self.averagePooling = nn.AvgPool2d((2, 2), stride=(2, 2))

        self.eca = None
        if ECA_size != None:
            self.eca = eca_layer(planes * self.expansion, int(ECA_size))

    def forward(self, x, h):
        identity = x

        x = torch.cat((x, h), dim=1)

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.eca != None:
            out = self.eca(out)
        y = out

        if self.downsample is not None:
            identity = self.downsample(identity)
        if self.averagePooling is not None:
            h = self.averagePooling(h)

        out += identity
        out = self.relu(out)

        return out, y, h
class RLA_Block_Backbone(nn.Module):
    '''
    rla_channel: the number of filters of the shared(recurrent) conv in RLA
    SE: whether use SE or not
    ECA: None: not use ECA, or specify a list of kernel sizes
    '''
    def __init__(self, block, layers,
                 rla_channel=32, SE=False, ECA=None,
                 zero_init_last_bn=True,  # zero_init_residual=False,
                 groups=1, width_per_group=64, replace_stride_with_dilation=None,
                 norm_layer=None):
        super(RLA_Block_Backbone, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        if replace_stride_with_dilation is None:
            # each element in the tuple indicates if we should replace
            # the 2x2 stride with a dilated convolution instead
            replace_stride_with_dilation = [False, False, False]
        if len(replace_stride_with_dilation) != 3:
            raise ValueError("replace_stride_with_dilation should be None "
                             "or a 3-element tuple, got {}".format(replace_stride_with_dilation))
        if ECA is None:
            ECA = [None] * 3
        elif len(ECA) != 3:
            raise ValueError("argument ECA should be a 4-element tuple, got {}".format(ECA))
        self.rla_channel = rla_channel
        self.flops = False
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = norm_layer(self.inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        conv_outs = [None] * 3
        recurrent_convs = [None] * 3
        stages = [None] * 3
        stage_bns = [None] * 3
        stages[0], stage_bns[0], conv_outs[0], recurrent_convs[0] = self._make_layer(block, 64, layers[0],
                                                                                     rla_channel=rla_channel, SE=SE,
                                                                                     ECA_size=ECA[0])
        stages[1], stage_bns[1], conv_outs[1], recurrent_convs[1] = self._make_layer(block, 128, layers[1],
                                                                                     rla_channel=rla_channel, SE=SE,
                                                                                     ECA_size=ECA[1],
                                                                                     stride=2, dilate=
                                                                                     replace_stride_with_dilation[0])
        stages[2], stage_bns[2], conv_outs[2], recurrent_convs[2] = self._make_layer(block, 256, layers[2],
                                                                                     rla_channel=rla_channel, SE=SE,
                                                                                     ECA_size=ECA[2],
                                                                                     stride=2, dilate=
                                                                                     replace_stride_with_dilation[1])
        self.conv_outs = nn.ModuleList(conv_outs)
        self.recurrent_convs = nn.ModuleList(recurrent_convs)
        self.stages = nn.ModuleList(stages)
        self.stage_bns = nn.ModuleList(stage_bns)
        self.tanh = nn.Tanh()
        self.bn2 = norm_layer(rla_channel)
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves like an identity.
        # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677
        if zero_init_last_bn:
            # if zero_init_residual:
            for m in self.modules():
                if isinstance(m, RLA_Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                # elif isinstance(m, RLA_BasicBlock):  # not implemented yet
                #     nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, blocks,
                    rla_channel, SE, ECA_size, stride=1, dilate=False):
        conv_out = conv1x1(planes * block.expansion, rla_channel)
        recurrent_conv = conv3x3(rla_channel, rla_channel)

        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample,
                            rla_channel=rla_channel, ECA_size=ECA_size, groups=self.groups,
                            base_width=self.base_width, dilation=previous_dilation, norm_layer=norm_layer))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes,
                                rla_channel=rla_channel,ECA_size=ECA_size, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer))

        bns = [norm_layer(rla_channel) for _ in range(blocks)]
        return nn.ModuleList(layers), nn.ModuleList(bns), conv_out, recurrent_conv

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        batch, _, height, width = x.size()
        h = torch.zeros(batch, self.rla_channel, height, width,
                        device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'))
        for layers, bns, conv_out, recurrent_conv in zip(self.stages, self.stage_bns, self.conv_outs,
                                                         self.recurrent_convs):
            for layer, bn in zip(layers, bns):
                x, y, h = layer(x, h)
                # RLA module updates
                y_out = conv_out(y)
                h = h + y_out
                h = bn(h)
                h = self.tanh(h)
                h = recurrent_conv(h)
        h = self.bn2(h)
        h = self.relu(h)
        x = torch.cat((x, h), dim=1)
        return x
class Attention_Map_proj(nn.Module):
    def __init__(self, in_channels, num_heads=1):
        super(Attention_Map_proj, self).__init__()
        self.num_heads = num_heads
        self.head_dim = in_channels // num_heads
        self.query = nn.Linear(in_channels, in_channels)
        self.key = nn.Linear(in_channels, in_channels)
        self.value = nn.Linear(in_channels, in_channels)
    def forward(self,x):
        B,C,H,W = x.size()
        x = x.permute(0, 2, 3, 1).contiguous().view(B,-1,C)
        query = self.query(x)
        key = self.key(x)
        query = query.view(x.size(0), -1, self.num_heads, self.head_dim)
        key = key.view(x.size(0), -1, self.num_heads, self.head_dim)
        value = x.view(x.size(0), -1, self.num_heads, self.head_dim)
        attention_map = F.softmax(torch.matmul(query, key.transpose(-2, -1)) / self.head_dim**0.5, dim=-1)
        out = torch.matmul(attention_map,value)
        out = out.view(x.size(0), -1, self.num_heads * self.head_dim)
        out = out.permute(0,2,1).view(B,-1,H,W)
        return out
class SSAP_Layer(nn.Module):
    def __init__(self,channels,out_c,map_size):
        super(SSAP_Layer, self).__init__()
        self.atten_Layer = Attention_Map_proj(in_channels=channels)
        if channels == out_c:
            self.avg_Conv = nn.Conv2d(channels,out_c,kernel_size=map_size,groups=channels)
        else:
            self.avg_Conv = nn.Conv2d(channels,out_c,kernel_size=map_size)
    def forward(self, x):
        attened_x = self.atten_Layer(x)
        out = self.avg_Conv(attened_x)
        return out
class RLANN(nn.Module):
    def __init__(self,need_classifier = False,numclasses=1000,drop_rate=0.2,final_sz = 8):
        super(RLANN,self).__init__()
        k_size = [5, 5, 5]
        self.embed_dim = 1056
        self.backbone = RLA_Block_Backbone(RLA_Bottleneck, [3, 4, 6], ECA=k_size)
        self.extra = nn.Sequential(
            torch.nn.LocalResponseNorm(size=2, alpha=1e-6, beta=1, k=0.5),
            torch.nn.Dropout2d(drop_rate),
            SSAP_Layer(self.embed_dim,512,map_size=final_sz),
            torch.nn.BatchNorm2d(num_features=512),
            torch.nn.LeakyReLU(negative_slope=0.2),
            torch.nn.Dropout2d(0.2)
        )
        self.need_classifier = need_classifier
        if self.need_classifier == True:
            self.classifier = nn.Sequential(
                nn.Flatten(start_dim=1),
                nn.Linear(512,numclasses)
            )
        else:
            self.flatten = nn.Flatten(start_dim=1)

    def forward(self,x):
        out = self.backbone(x)
        out = self.extra(out)
        if self.need_classifier == True:
            out = self.classifier(out)
        else:
            out = self.flatten(out)
        return out

if __name__ == '__main__':
    net = RLANN().cuda()
    dict = torch.load("pretrained.pkl")
    net.load_state_dict(dict)
